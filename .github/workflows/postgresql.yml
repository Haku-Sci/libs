name: Deploy PostgreSQL via SSH

on:
  workflow_call:

jobs:
  deploy-postgres:
    runs-on: ubuntu-latest
    env:
      POSTGRES_ADMIN: ${{ vars.POSTGRESQL_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRESQL_PASSWORD }}
      DB_NAME: ${{ github.event.repository.name }}
    steps:
      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy PostgreSQL container via SSH
        run: |
          ssh -p ${{ vars.SSH_PORT }} -o StrictHostKeyChecking=no ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }} bash << 'EOF'
            # Stop & remove existing container
            if docker ps -a --format '{{.Names}}' | grep -qw "postgres"; then
              docker rm -f postgres || true
            fi

            # Ensure data directory exists
            mkdir -p /opt/postgres/data

            NETWORK_ARG=""
            if [ -n "${{ vars.DOCKER_NETWORK }}" ]; then
              if ! docker network inspect "${{ vars.DOCKER_NETWORK }}" > /dev/null 2>&1; then
                echo "Create Docker network: ${{ vars.DOCKER_NETWORK }}"
                docker network create "${{ vars.DOCKER_NETWORK }}" || true
              fi
              NETWORK_ARG="--network ${{ vars.DOCKER_NETWORK }}"
            fi

            if docker ps -a --format '{{.Names}}' | grep -qw "postgresql"; then
              echo "deleting existing PostgreSQL container" 
              docker rm -f postgresql || true
            fi

            # Run PostgreSQL container with admin user/password and database
            docker run -d \
              --name postgresql \
              $NETWORK_ARG \
              -p 5432:5432 \
              -v /opt/postgres/data:/var/lib/postgresql/data \
              -e POSTGRES_USER="${{ env.POSTGRES_ADMIN }}" \
              -e POSTGRES_PASSWORD="${{ env.POSTGRES_PASSWORD }}" \
              -e POSTGRES_DB="${{ env.DB_NAME }}" \
              postgres:latest
            RC=$?
            if [ $RC -ne 0 ]; then
              docker logs postgresql || true
              exit $RC
            else
              echo "PostgreSQL container starting with name 'postgresql'."
              # Wait for PostgreSQL to be ready
              until docker logs postgresql 2>&1 | { grep -E -qi 'ready' && exit 0; grep -E -qi 'error' && exit 1; false; }; do sleep 1; done

              echo "PostgreSQL container started"

              # Set the password for the admin user
              docker exec -i postgresql psql -U "${{ env.POSTGRES_ADMIN }}" -d "${{ env.DB_NAME }}" << 'SQL'
                ALTER USER "${{ env.POSTGRES_ADMIN }}" WITH PASSWORD '${{ env.POSTGRES_PASSWORD }}';
          SQL
          fi
          EOF

      - name: Show PostgreSQL status on server
        run: |
          ssh -p ${{ vars.SSH_PORT }} -o StrictHostKeyChecking=no ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }} \
            "docker ps --filter name=postgres --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'"
