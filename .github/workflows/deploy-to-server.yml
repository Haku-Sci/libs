name: deploy-to-server

on:
  workflow_call:

jobs:
  whitelist:
    name: Whitelist GitHub IP
    runs-on: ubuntu-latest
    outputs:
      ip: ${{ steps.get_ip.outputs.ip }}
    steps:
      - name: Get public IP of runner
        id: get_ip
        run: echo "::set-output name=ip::$(curl -s https://ifconfig.me)"

      - name: Whitelist GitHub runner IP
        uses: adnanjaw/ip-whitelist-on-hetznerfw@v2
        with:
          hetzner_api_key: ${{ secrets.HETZNER_FIREWALL_API_TOKEN }}
          ip_address: ${{ steps.get_ip.outputs.ip }}
          firewall_name: "firewall-github-actions"
          port: "22"
          protocol: tcp
          direction: in
          description: "github-actions-${{ github.run_id }}"
          cleanup: false

  deploy:
    name: Build and Deploy
    needs: whitelist
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: |
            --allow-insecure-entitlement network.host
          driver-opts: |
            network=host

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          load: true
          platforms: ${{ vars.DOCKER_PLATFORM }}
          cache-from: type=gha,scope=${{ github.ref_name }}-app
          cache-to:   type=gha,mode=max,scope=${{ github.ref_name }}-app
          tags: ${{ github.repository }}:latest
          allow: network.host
          network: host

      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Transfer Docker image
        run: |
          docker save ${{ github.repository }}:latest | ssh -o StrictHostKeyChecking=no -p ${{ vars.SSH_PORT }} ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }} docker load

      - name: Set port redirection if needed
        id: set_redirectports
        run: |
          REDIRECT_PORT=""
          if [ -n "${{ vars.DOCKER_PORT_REDIRECT }}" ]; then
            REDIRECT_PORT="-p ${{ vars.DOCKER_PORT_REDIRECT }}"
          fi
          echo "redirected_ports=$REDIRECT_PORT" >> "$GITHUB_OUTPUT"

      - name: Prepare all env and secret variables
        id: set_env_vars
        env:
          ALL_SECRETS: ${{ toJson(secrets) }}
          ALL_VARS: ${{ toJson(vars) }}
        run: |
          ENV_RUN=""
          for key in $(echo "$ALL_VARS" | jq -r 'keys[]'); do
            if [[ "$key" =~ ^(GITHUB|SSH|DOCKER) ]]; then continue; fi
            value=$(echo "$ALL_VARS" | jq -r --arg k "$key" '.[$k]')
            value_escaped=$(printf '%s' "$value" | sed 's/"/\\"/g')
            ENV_RUN+=" -e $key=\"$value_escaped\""
          done
          for key in $(echo "$ALL_SECRETS" | jq -r 'keys[]'); do
            if [[ "$key" =~ ^(GITHUB|SSH|DOCKER) ]]; then continue; fi
            value=$(echo "$ALL_SECRETS" | jq -r --arg k "$key" '.[$k]')
            value_escaped=$(printf '%s' "$value" | sed 's/"/\\"/g')
            ENV_RUN+=" -e $key=\"$value_escaped\""
          done
          ENV_RUN+=" -e SERVICE_PUBLIC_HOSTNAME=${{ vars.SSH_HOST }}"
          echo "env_run=$ENV_RUN" >> "$GITHUB_OUTPUT"

      - name: Deploy app via SSH
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ vars.SSH_PORT }} \
              ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }} bash << 'EOF'
            docker rm -f app || true
            NETWORK_ARG=""
            if [ -n "${{ vars.DOCKER_NETWORK }}" ]; then
              docker network create "${{ vars.DOCKER_NETWORK }}" || true
              NETWORK_ARG="--network ${{ vars.DOCKER_NETWORK }}"
            fi
            docker run -d --name app \
              $NETWORK_ARG \
              ${{ steps.set_redirectports.outputs.redirected_ports }} \
              ${{ steps.set_env_vars.outputs.env_run }} \
              ${{ github.repository }}:latest
          EOF

  clean-whitelist:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Cleanup GitHub runner IP rule
        uses: adnanjaw/ip-whitelist-on-hetznerfw@v2
        with:
          hetzner_api_key: ${{ secrets.HETZNER_FIREWALL_API_TOKEN }}
          ip_address: ${{ needs.whitelist.outputs.ip }}
          firewall_name: "firewall-github-actions"
          port: "22"
          protocol: tcp
          direction: in
          description: "github-actions-${{ github.run_id }}"
          cleanup: true
