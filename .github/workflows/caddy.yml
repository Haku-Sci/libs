name: Deploy Caddy via SSH with templated Caddyfile
on:
  workflow_call:
jobs:
  whitelist:
    name: Whitelist GitHub Actions IP Ranges
    runs-on: ubuntu-latest
    steps:
      - name: Check current runner IP
        run: |
          echo "Current runner IP:"
          curl -s https://ifconfig.me
          echo ""
      
      - name: Fetch GitHub Actions IP ranges
        id: actions_cidrs
        run: |
          # Fetch CIDRs and clean them
          curl -s https://api.github.com/meta | jq -r '.actions[]' | grep -v '^$' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$' > actions_cidrs.txt
          
          # Check file content for debugging
          echo "Retrieved CIDRs:"
          cat actions_cidrs.txt
          
          # Check that we have valid CIDRs
          if [ ! -s actions_cidrs.txt ]; then
            echo "Error: No valid CIDRs found"
            exit 1
          fi
          
          # Create comma-separated list (without spaces)
          cidrs=$(paste -sd, actions_cidrs.txt | tr -d ' ')
          
          # Check final format
          echo "Final format: $cidrs"
          
          # Use new syntax for outputs
          echo "cidrs=$cidrs" >> $GITHUB_OUTPUT
      
      - name: Whitelist all GitHub Actions ranges
        uses: adnanjaw/ip-whitelist-on-hetznerfw@v2
        with:
          hetzner_api_key: ${{ secrets.HETZNER_FIREWALL_API_TOKEN }}
          custom_cidrs: ${{ steps.actions_cidrs.outputs.cidrs }}
          firewall_name: "firewall-github-actions"
          port: "22"
          protocol: tcp
          direction: in
          description: "github-actions-cidrs-${{ github.run_id }}"
          cleanup: false
      
      - name: Wait for firewall rules to apply
        run: |
          echo "Waiting for firewall rules to apply..."
          sleep 10
          echo "Firewall rules should now be active"
  
  deploy:
    runs-on: ubuntu-latest
    needs: whitelist
    steps:
      - name: Check current runner IP
        run: |
          echo "Current runner IP:"
          curl -s https://ifconfig.me
          echo ""
      
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Add SSH host key
        run: |
          mkdir -p ~/.ssh
          echo "Scanning SSH host key for ${{ vars.SSH_HOST }}:${{ vars.SSH_PORT }}"
          ssh-keyscan -p ${{ vars.SSH_PORT }} ${{ vars.SSH_HOST }} 2>&1 | tee -a ~/.ssh/known_hosts
          echo "SSH host key added successfully"
      
      - name: Copy templated Caddyfile to remote
        run: |
          scp -P ${{ vars.SSH_PORT }} Caddyfile ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }}:/tmp/Caddyfile
      
      - name: Deploy Caddy container via SSH
        run: |
          ssh -p ${{ vars.SSH_PORT }} -o StrictHostKeyChecking=no ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }} bash << 'EOF'
            if docker ps -a --format '{{.Names}}' | grep -qw "caddy"; then
              docker rm -f caddy
            fi
            mkdir -p /opt/caddy/config /opt/caddy/data
            mv /tmp/Caddyfile /opt/caddy/config/Caddyfile
            docker run -d \
              --name caddy \
              -p 80:80 -p 443:443 \
              -v /opt/caddy/config/Caddyfile:/etc/caddy/Caddyfile:ro \
              -v /opt/caddy/data:/data \
              caddy:2-alpine
          EOF
  
  # Clean ips on the server side
  clean-whitelist:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Fetch GitHub Actions IP ranges
        id: actions_cidrs
        run: |
          # Fetch CIDRs and clean them
          curl -s https://api.github.com/meta | jq -r '.actions[]' | grep -v '^$' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$' > actions_cidrs.txt
          
          # Check file content for debugging
          echo "Retrieved CIDRs:"
          cat actions_cidrs.txt
          
          # Check that we have valid CIDRs
          if [ ! -s actions_cidrs.txt ]; then
            echo "Error: No valid CIDRs found"
            exit 1
          fi
          
          # Create comma-separated list (without spaces)
          cidrs=$(paste -sd, actions_cidrs.txt | tr -d ' ')
          
          # Check final format
          echo "Final format: $cidrs"
          
          # Use new syntax for outputs
          echo "cidrs=$cidrs" >> $GITHUB_OUTPUT
      
      - name: Clean GitHub Actions IP ranges from whitelist
        uses: adnanjaw/ip-whitelist-on-hetznerfw@v2
        with:
          hetzner_api_key: ${{ secrets.HETZNER_FIREWALL_API_TOKEN }}
          custom_cidrs: ${{ steps.actions_cidrs.outputs.cidrs }}
          firewall_name: "firewall-github-actions"
          port: "22"
          protocol: tcp
          direction: in
          description: "github-actions-cidrs-${{ github.run_id }}"
          cleanup: true