name: Deploy Neo4j via SSH

on:
  workflow_call:

jobs:
  deploy-neo4j:
    runs-on: ubuntu-latest
    env:
      NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}

    steps:
      # Set allow ips to send the image
      - uses: ./.github/workflows/whitelist-gh.yml
        id: whitelist
        with:
          firewall_name: "firewall-github-actions"
          port: "22"
      
      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH host key
        run: ssh-keyscan "${{ vars.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Deploy Neo4j container via SSH
        run: |
          if [ -z "${{ env.NEO4J_PASSWORD }}" ]; then
            echo "::error::NEO4J_PASSWORD is empty. Aborting deployment."
            exit 1
          fi

          ssh -p "${{ vars.SSH_PORT }}" -o StrictHostKeyChecking=no "${{ vars.SSH_USER }}"@"${{ vars.SSH_HOST }}" bash << 'EOF'
            if docker ps -a --format '{{.Names}}' | grep -qw "neo4j"; then
              echo "Neo4j container exists â€” forcing password reset"

              # Stop container
              docker stop neo4j || true

              # Mount config and disable auth
              docker run --rm \
                -v neo4j_home:/var/lib/neo4j \
                neo4j:latest sh -c "echo 'dbms.security.auth_enabled=false' >> /var/lib/neo4j/conf/neo4j.conf"

              # Restart container with disabled auth
              docker start neo4j

              # Wait for DB to start
              until docker logs neo4j 2>&1 | grep -q "Bolt enabled"; do sleep 1; done

              # Change password directly via cypher-shell
              docker exec neo4j bin/cypher-shell -u neo4j -d system \
                "ALTER USER neo4j SET PASSWORD '${{ vars.NEO4J_PASSWORD }}';"

              # Stop container again
              docker stop neo4j

              # Re-enable auth
              docker run --rm \
                -v neo4j_home:/var/lib/neo4j \
                neo4j:latest sh -c "sed -i '/dbms.security.auth_enabled=false/d' /var/lib/neo4j/conf/neo4j.conf"

              # Start normally
              docker start neo4j
            else
              echo "Deploy new Neo4j container"
              NETWORK_ARG=""
              if [ -n "${{ vars.DOCKER_NETWORK }}" ]; then
                docker network inspect "${{ vars.DOCKER_NETWORK }}" > /dev/null 2>&1 || \
                  docker network create "${{ vars.DOCKER_NETWORK }}"
                NETWORK_ARG="--network ${{ vars.DOCKER_NETWORK }}"
              fi

              mkdir -p /opt/neo4j/data
              docker run -d \
                --name neo4j \
                $NETWORK_ARG \
                -p 7474:7474 -p 7687:7687 \
                -v /opt/neo4j/data:/data \
                -e NEO4J_AUTH=neo4j/${NEO4J_PASSWORD} \
                neo4j:latest
            fi
          EOF

      - name: Show Neo4j status on server
        run: |
          ssh -p "${{ vars.SSH_PORT }}" -o StrictHostKeyChecking=no "${{ vars.SSH_USER }}"@"${{ vars.SSH_HOST }}" \
            "docker ps --filter name=neo4j --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'"
      
      # Clean ips on the server side
      - name: Cleanup GitHub runner IP rule
        uses: adnanjaw/ip-whitelist-on-hetznerfw@v2
        with:
          hetzner_api_key: ${{ secrets.HETZNER_FIREWALL_API_TOKEN }}
          ip_address: ${{ steps.whitelist.outputs.ip }}
          firewall_name: "firewall-github-actions"
          port: "22"
          protocol: tcp
          direction: in
          description: "github-actions-${{ github.run_id }}"
          cleanup: true
