name: Deploy Caddy via SSH with templated Caddyfile
on:
  workflow_call:
jobs:
  whitelist:
    if: false
    name: Whitelist GitHub Actions IP Ranges
    runs-on: ubuntu-latest
    steps:
      - name: Fetch and prepare GitHub Actions IP ranges
        id: actions_cidrs
        run: |
          set -euo pipefail

          # -----------------------------------------
          # 1) Fetch .actions from GitHub meta and
          #    validate using Python's ipaddress module.
          #    Python prints CSV to stdout, and debug to stderr.
          # -----------------------------------------
          cidrs=$(
            curl -sS https://api.github.com/meta | python3 - <<'PY'
          import sys, json, ipaddress
          data = json.load(sys.stdin)
          arr = data.get("actions", []) or []

          valid = set()
          invalid = []
          for entry in arr:
              if not isinstance(entry, str):
                  invalid.append(str(entry))
                  continue
              s = entry.strip()
              try:
                  # strict=False accepts host/net forms like 1.2.3.4/32
                  net = ipaddress.ip_network(s, strict=False)
                  # keep both IPv4 and IPv6 if you want; here we keep IPv4 and IPv6
                  valid.add(str(net))
              except Exception:
                  invalid.append(s)

          # stable sort: by IP bytes then prefix length
          def sort_key(x):
              ip, mask = x.split('/')
              if ':' in ip:           # IPv6: sort by hextets then mask
                  parts = [int(h,16) for h in ip.split(':') if h!='']
                  return parts + [int(mask)]
              else:
                  parts = [int(p) for p in ip.split('.')]
                  return parts + [int(mask)]

          outs = sorted(valid, key=sort_key)
          # print CSV to stdout (captured by bash)
          print(",".join(outs))

          # print debug info to stderr (visible in job logs)
          print(f"VALID_COUNT={len(outs)}", file=sys.stderr)
          print(f"INVALID_COUNT={len(invalid)}", file=sys.stderr)
          if invalid:
              print("SAMPLE_INVALID:", file=sys.stderr)
              for i in invalid[:20]:
                  print(i, file=sys.stderr)
          PY
                  )

                  # -----------------------------------------
                  # 2) Basic sanity checks in bash
                  # -----------------------------------------
                  echo "DEBUG: raw CIDR string length (chars): ${#cidrs}"
                  if [ -z "$cidrs" ]; then
                    echo "Error: no valid CIDRs found" >&2
                    exit 1
                  fi

                  # ensure there are no empty items (this was the original cause)
                  bad=$(echo "$cidrs" | tr ',' '\n' | grep -vE '^[0-9a-fA-F:.]+/[0-9]+$' || true)
                  if [ -n "$bad" ]; then
                    echo "Error: One or more elements failed the final regex check:" >&2
                    echo "$bad" >&2
                    exit 1
                  fi

                  # show how many CIDRs we will pass
                  echo "Final CIDR count: $(echo "$cidrs" | tr ',' '\n' | wc -l)"

                  # -----------------------------------------
                  # 3) Export to GitHub Actions output
                  # -----------------------------------------
                  echo "cidrs=$cidrs" >> "$GITHUB_OUTPUT"

      - name: Whitelist all GitHub Actions ranges
        uses: adnanjaw/ip-whitelist-on-hetznerfw@v2
        with:
          hetzner_api_key: ${{ secrets.HETZNER_FIREWALL_API_TOKEN }}
          custom_cidrs: ${{ steps.actions_cidrs.outputs.cidrs }}
          firewall_name: "firewall-github-actions"
          port: "22"
          protocol: tcp
          direction: in
          description: "github-actions-cidrs-${{ github.run_id }}"
          cleanup: false

      - name: Wait for firewall rules to apply
        run: |
          echo "Waiting for firewall rules to apply..."
          sleep 10
          echo "Firewall rules should now be active"


  
  deploy:
    runs-on: ubuntu-latest
    #needs: whitelist
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Add SSH host key
        run: |
          mkdir -p ~/.ssh
          echo "Scanning SSH host key for ${{ vars.SSH_HOST }}:${{ vars.SSH_PORT }}"
          ssh-keyscan -p ${{ vars.SSH_PORT }} ${{ vars.SSH_HOST }} 2>&1 | tee -a ~/.ssh/known_hosts
          echo "SSH host key added successfully"
      
      - name: Copy templated Caddyfile to remote
        run: |
          scp -P ${{ vars.SSH_PORT }} Caddyfile ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }}:/tmp/Caddyfile
      
      - name: Deploy Caddy container via SSH
        run: |
          ssh -p ${{ vars.SSH_PORT }} -o StrictHostKeyChecking=no ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }} bash << 'EOF'
            if docker ps -a --format '{{.Names}}' | grep -qw "caddy"; then
              docker rm -f caddy
            fi
            mkdir -p /opt/caddy/config /opt/caddy/data
            mv /tmp/Caddyfile /opt/caddy/config/Caddyfile
            docker run -d \
              --name caddy \
              --network host \
              -p 80:80 -p 443:443 \
              -v /opt/caddy/config/Caddyfile:/etc/caddy/Caddyfile:ro \
              -v /opt/caddy/data:/data \
              caddy:2-alpine
          EOF
  
  # Clean ips on the server side
  clean-whitelist:
    runs-on: ubuntu-latest
    needs: deploy
    if: false
    #if: always()
    steps:
      - name: Fetch GitHub Actions IP ranges
        id: actions_cidrs
        run: |
          # Fetch CIDRs and clean them thoroughly
          curl -s https://api.github.com/meta | jq -r '.actions[]' | \
            grep -v '^$' | \
            grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$' | \
            sort -u > actions_cidrs.txt
          
          # Check file content for debugging
          echo "Retrieved CIDRs:"
          cat actions_cidrs.txt
          echo "Total count: $(wc -l < actions_cidrs.txt)"
          
          # Check that we have valid CIDRs
          if [ ! -s actions_cidrs.txt ]; then
            echo "Error: No valid CIDRs found"
            exit 1
          fi
          
          # Create comma-separated list (without spaces) and remove any trailing commas
          cidrs=$(paste -sd, actions_cidrs.txt | sed 's/,$//' | tr -d ' \t\n\r')
          
          # Verify no empty elements
          echo "Checking for empty elements..."
          echo "$cidrs" | tr ',' '\n' | while read cidr; do
            if [ -z "$cidr" ]; then
              echo "Warning: Found empty CIDR element"
            fi
          done
          
          # Check final format
          echo "Final format: $cidrs"
          echo "Final length: ${#cidrs}"
          
          # Use new syntax for outputs
          echo "cidrs=$cidrs" >> $GITHUB_OUTPUT
      
      - name: Clean GitHub Actions IP ranges from whitelist
        uses: adnanjaw/ip-whitelist-on-hetznerfw@v2
        with:
          hetzner_api_key: ${{ secrets.HETZNER_FIREWALL_API_TOKEN }}
          custom_cidrs: ${{ steps.actions_cidrs.outputs.cidrs }}
          firewall_name: "firewall-github-actions"
          port: "22"
          protocol: tcp
          direction: in
          description: "github-actions-cidrs-${{ github.run_id }}"
          cleanup: true