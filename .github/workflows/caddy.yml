name: Deploy Caddy via SSH with templated Caddyfile
on:
  workflow_call:
jobs:
  whitelist:
    name: Whitelist GitHub Actions IP Ranges
    runs-on: ubuntu-latest
    steps:
      - name: Check current runner IP
        run: |
          echo "Current runner IP:"
          curl -s https://ifconfig.me
          echo ""
      
      - name: Fetch GitHub Actions IP ranges
        id: actions_cidrs
        run: |
          # Fetch CIDRs and clean them
          curl -s https://api.github.com/meta | jq -r '.actions[]' | grep -v '^$' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$' > actions_cidrs.txt
          
          # Check file content for debugging
          echo "Retrieved CIDRs:"
          cat actions_cidrs.txt
          
          # Check that we have valid CIDRs
          if [ ! -s actions_cidrs.txt ]; then
            echo "Error: No valid CIDRs found"
            exit 1
          fi
          
          # Create comma-separated list (without spaces)
          cidrs=$(paste -sd, actions_cidrs.txt | tr -d ' ')
          
          # Check final format
          echo "Final format: $cidrs"
          
          # Use new syntax for outputs
          echo "cidrs=$cidrs" >> $GITHUB_OUTPUT
      
      - name: Whitelist all GitHub Actions ranges
        run: |
          # Get firewall ID
          FIREWALL_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.HETZNER_FIREWALL_API_TOKEN }}" \
            "https://api.hetzner.cloud/v1/firewalls" | \
            jq -r '.firewalls[] | select(.name=="firewall-github-actions") | .id')
          
          echo "Firewall ID: $FIREWALL_ID"
          
          if [ "$FIREWALL_ID" = "null" ] || [ -z "$FIREWALL_ID" ]; then
            echo "Error: Firewall 'firewall-github-actions' not found"
            exit 1
          fi
          
          # Get current firewall rules
          CURRENT_RULES=$(curl -s -H "Authorization: Bearer ${{ secrets.HETZNER_FIREWALL_API_TOKEN }}" \
            "https://api.hetzner.cloud/v1/firewalls/$FIREWALL_ID" | \
            jq -r '.firewall.rules')
          
          # Convert CIDRs to array format for Hetzner API
          CIDRS="${{ steps.actions_cidrs.outputs.cidrs }}"
          CIDR_ARRAY=$(echo $CIDRS | jq -R 'split(",") | map({"ip": .})')
          
          # Create new rule for SSH (port 22)
          NEW_RULE='{
            "direction": "in",
            "source_ips": '$CIDR_ARRAY',
            "destination_port": "22",
            "protocol": "tcp",
            "description": "github-actions-cidrs-${{ github.run_id }}"
          }'
          
          # Add new rule to existing rules
          UPDATED_RULES=$(echo $CURRENT_RULES | jq --argjson newrule "$NEW_RULE" '. + [$newrule]')
          
          # Update firewall rules
          echo "Updating firewall rules..."
          curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.HETZNER_FIREWALL_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"rules\": $UPDATED_RULES}" \
            "https://api.hetzner.cloud/v1/firewalls/$FIREWALL_ID/actions/set_rules" | \
            jq '.'
      
      - name: Wait for firewall rules to apply
        run: |
          echo "Waiting for firewall rules to apply..."
          sleep 10
          echo "Firewall rules should now be active"
  
  deploy:
    runs-on: ubuntu-latest
    needs: whitelist
    steps:
      - name: Check current runner IP
        run: |
          echo "Current runner IP:"
          curl -s https://ifconfig.me
          echo ""
      
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Add SSH host key
        run: |
          mkdir -p ~/.ssh
          echo "Scanning SSH host key for ${{ vars.SSH_HOST }}:${{ vars.SSH_PORT }}"
          ssh-keyscan -p ${{ vars.SSH_PORT }} ${{ vars.SSH_HOST }} 2>&1 | tee -a ~/.ssh/known_hosts
          echo "SSH host key added successfully"
      
      - name: Copy templated Caddyfile to remote
        run: |
          scp -P ${{ vars.SSH_PORT }} Caddyfile ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }}:/tmp/Caddyfile
      
      - name: Deploy Caddy container via SSH
        run: |
          ssh -p ${{ vars.SSH_PORT }} -o StrictHostKeyChecking=no ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }} bash << 'EOF'
            if docker ps -a --format '{{.Names}}' | grep -qw "caddy"; then
              docker rm -f caddy
            fi
            mkdir -p /opt/caddy/config /opt/caddy/data
            mv /tmp/Caddyfile /opt/caddy/config/Caddyfile
            docker run -d \
              --name caddy \
              -p 80:80 -p 443:443 \
              -v /opt/caddy/config/Caddyfile:/etc/caddy/Caddyfile:ro \
              -v /opt/caddy/data:/data \
              caddy:2-alpine
          EOF
  
  # Clean ips on the server side
  clean-whitelist:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Fetch GitHub Actions IP ranges
        id: actions_cidrs
        run: |
          # Fetch CIDRs and clean them
          curl -s https://api.github.com/meta | jq -r '.actions[]' | grep -v '^$' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$' > actions_cidrs.txt
          
          # Check file content for debugging
          echo "Retrieved CIDRs:"
          cat actions_cidrs.txt
          
          # Check that we have valid CIDRs
          if [ ! -s actions_cidrs.txt ]; then
            echo "Error: No valid CIDRs found"
            exit 1
          fi
          
          # Create comma-separated list (without spaces)
          cidrs=$(paste -sd, actions_cidrs.txt | tr -d ' ')
          
          # Check final format
          echo "Final format: $cidrs"
          
          # Use new syntax for outputs
          echo "cidrs=$cidrs" >> $GITHUB_OUTPUT
      
      - name: Clean GitHub Actions IP ranges from whitelist
        run: |
          # Get firewall ID
          FIREWALL_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.HETZNER_FIREWALL_API_TOKEN }}" \
            "https://api.hetzner.cloud/v1/firewalls" | \
            jq -r '.firewalls[] | select(.name=="firewall-github-actions") | .id')
          
          echo "Firewall ID: $FIREWALL_ID"
          
          if [ "$FIREWALL_ID" = "null" ] || [ -z "$FIREWALL_ID" ]; then
            echo "Warning: Firewall 'firewall-github-actions' not found"
            exit 0
          fi
          
          # Get current firewall rules
          CURRENT_RULES=$(curl -s -H "Authorization: Bearer ${{ secrets.HETZNER_FIREWALL_API_TOKEN }}" \
            "https://api.hetzner.cloud/v1/firewalls/$FIREWALL_ID" | \
            jq -r '.firewall.rules')
          
          # Remove rules with our description pattern
          CLEANED_RULES=$(echo $CURRENT_RULES | jq '[.[] | select(.description | test("github-actions-cidrs-") | not)]')
          
          # Update firewall rules
          echo "Cleaning firewall rules..."
          curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.HETZNER_FIREWALL_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"rules\": $CLEANED_RULES}" \
            "https://api.hetzner.cloud/v1/firewalls/$FIREWALL_ID/actions/set_rules" | \
            jq '.'